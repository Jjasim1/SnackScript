SnackScript {
  Program = Statement+
  
  Statement = "ü´ô" id Block                               --class
            | "ü•ò" id Params Block                        --function
            | "ü•ò" id Block                               --simplefunction
            | "üç•" "(" ForInit ")" Block                  --forloop
            | "üç•" ids "in" id ("." "ü•ö")? Block          --foreach 
            | "üßÅ" Exp Block ElseIfPart*  ElsePart?       --if
            | "üçΩÔ∏è" ExpList                                    --print
            | "ü´ó" Exp                                        --return
            | "ü•°" id "=" CollectionLit                       --collection
            | "üç±" id "=" "{" CompExp "}"                     --comprehension
            | "üç≥" VarDecls                                   --vardecl
            | DottedId "=" Exp                                      --assign
            | DottedId "+=" Exp                                     --addassign
  
  Block = ":" Statement+ ";"
  
  MethodDecl = "ü•ò" id "(" ParamList ")" ":" Block
  
  Params = ParamsWithList
         | EmptyParams
  
  ParamsWithList = "(" ParamList ")"
  EmptyParams = ""
  
  ParamList = NonEmptyParamList
          | EmptyParamList
  
  NonEmptyParamList = ParamItem ("," ParamItem)*
  EmptyParamList = ""
  
  ParamItem = "üç≥"? id
  
  ForInit = "üç≥" id "=" Exp "," Exp "," id "++"
  
  ElseIfPart = "üç∞" Exp Block
  
  ElsePart = "üéÇ" Block
  
  ExpList = Exp ("," Exp)*
          | stringLit ("," (Exp | stringLit))*
  
  VarDecls = VarDecl ("," VarDecl)*
  
  VarDecl = id ("=" Exp)?
  
  CompExp = id ":" Exp "for" id "," id "in" id
  
  CollectionLit = ArrayLit
                | DictLit
  
  ArrayLit = "[" (ArrayItem ("," ArrayItem)*)? "]"
  
  DictLit = "{" (DictItem ("," DictItem)*)? "}"
  
  ArrayItem = TupleItem
            | SimpleItem
            
  TupleItem = "(" Exp ("," Exp)+ ")"
  SimpleItem = Exp
  
  DictItem = Exp ":" Exp
  
  Exp = Exp1 RelOp Exp1                                       --binary
      | Exp1
  
  Exp1 = Exp1 AddOp Term                                      --binary
       | Term
  
  Term = Term MulOp Factor                                    --binary
       | Factor
  
  Factor = "not" Factor                                         --neg
         | Primary
  
  Primary = DottedId "(" (Exp ("," Exp)*)? ")"                      --call
          | BoolLit                                           --bool
          | numeral                                           --num
          | stringLit                                         --string
          | DottedId                                                --var
          | "(" Exp ")"                                       --paren
  
  BoolLit = "ü•ó" | "üç≤"
  
  RelOp = "<=" | ">=" | "==" | "!=" | "<" | ">"
  AddOp = "+" | "-"
  MulOp = "*" | "/" | "%"
  
  stringLit = "\"" (~"\"" any)* "\""
  
  numeral = digit+ ("." digit+)?
  
  id = ~keyword (letter | "_") (alnum | "_" | "*")*
  ids = id (", " id)*

  DottedId = id ("." id)*
  
  keyword = "in" | "for"
  
  NewLine = "\n"+
  IndentMarker = &(space+)  // Just a positive lookahead, not consuming input
  DedentMarker = &(space*)  // Just a positive lookahead, not consuming input
  
  space += comment | multicomment
  comment = "üç¶" (~"\n" any)*                               --comment
  multicomment = "üç®" (~"üç®" any)* "üç®"                      --multicomment
}